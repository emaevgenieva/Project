#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include <oraca.h>
#include <sqlca.h>
#include <sqlcpr.h>
#include "esql_func.h"
#include "Files.h"

void stringTrim(char* str)
{
	int sizeStr = (int)strlen(str);
	int i = 0;
	for(;i < sizeStr; i++){
	if(isblank( str[i] )||(str[i] == '\n' )){
		str[i] = '\0';
		break;
	}}
}

void sql_Commit(FILE* fpMsg, FILE* fpLog) 
{
	writeToLogMsg(fpMsg, "Committing");
  
  /* handle errors */
  EXEC SQL WHENEVER SQLERROR do sql_error(fpLog, "Oracle error"); 
  EXEC SQL COMMIT; 

  if (0 == sqlca.sqlcode) 
  {
    printf("\nCommited.\n");
  }
}

int sql_Connect(FILE* fpMsg, FILE* fpLog, const char* pszConnStr) 
{	
	writeToLogMsg(fpMsg, "Connecting to oracle databasa.");
 
  EXEC SQL BEGIN DECLARE SECTION;
  char szConnStr[128] = { 0 };
  EXEC SQL END DECLARE SECTION;
  
	strncpy(szConnStr, pszConnStr, sizeof(szConnStr) - 1);
	
  /* handle errors */
  EXEC SQL WHENEVER SQLERROR do sql_error(fpLog, "Oracle error"); 
  EXEC SQL CONNECT :szConnStr;
  
  if (0 == sqlca.sqlcode) 
  {
    printf("\nConnected.\n"); 
	return 0;
  }
  else
  {
	printf("\nNot connected.\n");
	writeToLogErr(fpLog, "Not connected and exit the program.");
	exit(1);
	return 1;
  }
  return 0;
}

void sql_error(FILE* fpLog, const char* pszPrefix) 
{
  char szBuf[BUFSIZ] = { 0 };
  size_t nBufLen = 0;
  size_t nMsgLen = 0;

  EXEC SQL WHENEVER SQLERROR CONTINUE;
  EXEC SQL ROLLBACK WORK RELEASE;

  nBufLen = sizeof(szBuf);
  sqlglm((unsigned char*)szBuf, &nBufLen, &nMsgLen);
  szBuf[ nMsgLen ] = 0;
  //printf("%s: %s\n", pszPrefix, szBuf);
  writeToLogErr(fpLog, szBuf);
  /* exit(EXIT_FAILURE); */
}

int sql_Select(FILE* fpMsg, FILE* fpLog, const int ID) 
{
	char logMsg[200];
	sprintf(logMsg, "Make Select fot Customer ID :%d", ID);
	writeToLogMsg(fpMsg, logMsg);
	
  EXEC SQL BEGIN DECLARE SECTION;
  int szID = ID;
  EXEC SQL END DECLARE SECTION;

  /* handle errors */
    EXEC SQL WHENEVER SQLERROR do sql_error(fpLog, "Oracle error"); 
  	EXEC SQL SELECT customer_id 
			   INTO :szID 
			   FROM customers 
			  WHERE customer_id = :ID;
    
	if (sqlca.sqlcode == 0) 
	{
		//printf("Row with ID %d exists\n", ID);
        return 1;
    } 
	else 
	{
	char errLog[200];
	sprintf(errLog, "Row with Customer ID %d does not exist", ID);
	writeToLogErr(fpLog, errLog);
	return 0;
    }

}

int sql_extSelect(FILE* fpMsg, FILE* fpLog, const char* extID) 
{
	char logMsg[200];
	sprintf(logMsg, "Make Select fot External Customer ID :%s", extID);
	writeToLogMsg(fpMsg, logMsg);
	
  EXEC SQL BEGIN DECLARE SECTION;
  char szID [20];
  EXEC SQL END DECLARE SECTION;

  strcpy(szID, extID);

  /* handle errors */
  EXEC SQL WHENEVER SQLERROR do sql_error(fpLog, "Oracle error"); 
  EXEC SQL SELECT external_reference 
			 INTO :szID 
			 FROM customers 
			 WHERE external_reference = :szID;
    
	if (sqlca.sqlcode == 0) 
	{
		//printf("Row with External Customer ID %s exist.\n", szID);
        return 1;
    } 
	else 
	{
		char errLog[200];
		sprintf(errLog, "Row with External Customer ID %s does not exist.", extID);
		writeToLogErr(fpLog, errLog);
        return 0;
    }
}

void sql_InsertCustomers(FILE* fpMsg, FILE* fpLog, const char* firstName, const char* familyName, const char* sex, const char* adrCity, 
						 const char* adrCountry, const char* creditLimit, const char* email, const char* extId) 
{
	char logMsg[200];
	sprintf(logMsg, "Make Insert extId %s in Customers table.", extId);
	writeToLogMsg(fpMsg, logMsg);
	
  /* handle errors */
    EXEC SQL WHENEVER SQLERROR do sql_error(fpLog, "Oracle error"); 
	EXEC SQL INSERT INTO customers (/* 01*/ customer_id,  
									/* 02*/ first_name, 
									/* 03*/ family_name, 
									/* 04*/ sex, 
									/* 05*/ adr_city, 
									/* 06*/ adr_country, 
									/* 07*/ credit_limit, 
									/* 08*/ email, 
									/* 09*/ external_reference)
							VALUES (/* 01*/ customers_seq.nextval, 
									/* 02*/ :firstName, 
									/* 03*/ :familyName, 
									/* 04*/ :sex, 
									/* 05*/ :adrCity, 
									/* 06*/ :adrCountry, 
									/* 07*/ :creditLimit, 
									/* 08*/ :email, 
									/* 09*/ :extId);
  	
   if (sqlca.sqlcode == 0) 
    {
		sql_Commit(fpMsg, fpLog);
		writeToLogMsg(fpMsg, "Row by extID inserted in Customers.");
		//EXEC SQL COMMIT; 
    } 
	else 
	{
		EXEC SQL ROLLBACK WORK RELEASE;
		writeToLogErr(fpLog, "Row by extID NOT inserted in Customers and exit the program.");
		//exit(1);
    }
}

void sql_UpdateCustomers(FILE* fpMsg, FILE* fpLog, const char* Id, const char* firstName, const char* familyName, const char* sex, const char* adrCity, 
const char* adrCountry, const char* creditLimit, const char* email) 
{
	char logMsg[200];
	sprintf(logMsg, "Make Update in Customers table by Customer ID: %s.", Id);
	writeToLogMsg(fpMsg, logMsg);
	
  /* handle errors */
    EXEC SQL WHENEVER SQLERROR do sql_error(fpLog, "Oracle error"); 
   	EXEC SQL UPDATE customers 
				SET first_name = :firstName, 
					family_name = :familyName, 
					sex = :sex, 
					adr_city = :adrCity, 	
					adr_country = :adrCountry, 
					credit_limit = :creditLimit, 
					email = :email 
			  WHERE customer_id = :Id;
		
				
   if (sqlca.sqlcode == 0) 
   {
		sql_Commit(fpMsg, fpLog);
		writeToLogMsg(fpMsg, "Row updated in Customers.");
    } 
	else 
	{
		EXEC SQL ROLLBACK WORK RELEASE;
		writeToLogErr(fpLog, "Row not updated in Customers and exit the program.");
		writeToLogErr(fpLog, sqlca.sqlerrm.sqlerrmc);
		exit(1);
	}
}

void sql_UpdateCustomersExtId(FILE* fpMsg, FILE* fpLog, const char* extId, const char* firstName, const char* familyName, const char* sex, const char* adrCity, 
const char* adrCountry, const char* creditLimit, const char* email) 
{
	char logMsg[200];
	sprintf(logMsg, "Make Update in Customers table by External Customer ID: %s.", extId);
	writeToLogMsg(fpMsg, logMsg);
	
  /* handle errors */
    EXEC SQL WHENEVER SQLERROR do sql_error(fpLog, "Oracle error"); 
   	EXEC SQL UPDATE customers 
				SET first_name = :firstName, 
					family_name = :familyName, 
					sex = :sex, 
					adr_city = :adrCity, 	
					adr_country = :adrCountry, 
					credit_limit = :creditLimit, 
					email = :email 
			  WHERE external_reference = :extId;
						
   if (sqlca.sqlcode == 0) 
    {
		sql_Commit(fpMsg, fpLog);
		writeToLogMsg(fpMsg, "Row by ExtID updated in Customers.");
	}
	else 
	{
		EXEC SQL ROLLBACK WORK RELEASE;
		writeToLogErr(fpLog, "Row by extID not updated in Customers and exit the program.");
		writeToLogErr(fpLog, sqlca.sqlerrm.sqlerrmc);
		//exit(1);
    }
}

void sql_InsertInvoices(FILE* fpMsg, FILE* fpLog, const char* invNumber, const char* invAmount, const char* invCurremcy, const char* extID)
{
	char logMsg[200];
	sprintf(logMsg, "Make Insert in Invoices table by External Customer ID: %s.", extID);
	writeToLogMsg(fpMsg, logMsg);
	
	EXEC SQL BEGIN DECLARE SECTION;
	int newSeq;
	char szInvNo[20];
	char connection[] = "TEAM3/dbpass@83.228.124.173:6223/TEAM3";
	//char connection[] = "rosen_karadjov/dbpass@83.228.124.173:6223/rosen_karadjov";
	EXEC SQL END DECLARE SECTION;
  
  /* handle errors */
    EXEC SQL WHENEVER SQLERROR do sql_error(fpLog, "Oracle error"); 
	
	EXEC SQL SELECT TO_CHAR(TO_DATE(:invNumber, 'DDMMYYYY'), 'YYYYMMDD')
			   INTO :szInvNo
			   FROM dual;
	
	EXEC SQL SELECT MAX(i.seq) 
			   INTO :newSeq 
			   FROM invoices i, customers c 
			  WHERE i.customer_id = c.customer_id AND c.external_reference = :extID;
			  
	newSeq = newSeq + 1;
	stringTrim(szInvNo);
	
	EXEC SQL INSERT INTO invoices ( /* 01*/ inv_no,  
									/* 02*/ amount, 
									/* 03*/ amount_due, 
									/* 04*/ currency, 
									/* 05*/ issue_date, 
									/* 06*/ due_date, 
									/* 07*/ customer_id, 
									/* 08*/ seq )
							SELECT  /* 01*/ c.customer_id||'_'||:newSeq||'_'||:szInvNo, 
									/* 02*/ :invAmount, 
									/* 03*/ NULL, 
									/* 04*/ :invCurremcy, 
									/* 05*/ TO_DATE(:invNumber, 'DD-MM-YYYY'), 
									/* 06*/ NULL, 
									/* 07*/ c.customer_id, 
									/* 08*/ :newSeq
					FROM customers c
					WHERE c.external_reference = :extID;
	
	
   if (sqlca.sqlcode == 0) 
   {
		sql_Commit(fpMsg, fpLog);
		writeToLogMsg(fpMsg, "Row inserted in Invoices.");
    } 
	else 
	{	
		EXEC SQL ROLLBACK WORK RELEASE;
		EXEC SQL CONNECT :connection;
		writeToLogErr(fpLog, "Row not inserted in Invoices and exit the program.");
		writeToLogErr(fpLog, sqlca.sqlerrm.sqlerrmc);
		//exit(1);
    }
}

void sql_InsertPaymens(FILE* fpMsg, FILE* fpLog, const char* payDate, const char* payAmount, const char* payCurremcy, const char* payMethod, const char* extID)
{
	char logMsg[200];
	sprintf(logMsg, "Make Insert in Payments table by External Customer ID: %s.", extID);
	writeToLogMsg(fpMsg, logMsg);
	
	EXEC SQL BEGIN DECLARE SECTION;
	char szLastInvoiceNum[20];
	//int rollBackFlag = 0;
	char connection[] = "TEAM3/dbpass@83.228.124.173:6223/TEAM3";
	//char connection[] = "rosen_karadjov/dbpass@83.228.124.173:6223/rosen_karadjov";
	EXEC SQL END DECLARE SECTION;
  
  /* handle errors */
   EXEC SQL WHENEVER SQLERROR do sql_error(fpLog, "Oracle error"); 
	EXEC SQL SELECT i.inv_no
			   INTO :szLastInvoiceNum
			   FROM invoices i, customers c 
			  WHERE i.customer_id = c.customer_id AND c.external_reference = :extID 
				AND i.seq = (SELECT MAX(seq)
			   FROM invoices 
			  WHERE customer_id = c.customer_id);
		  
	 if (sqlca.sqlcode == 0) 
		{
		//stringTrim(szLastInvoiceNum);	
	EXEC SQL INSERT INTO payments ( /* 01*/ invoice_no,  
									/* 02*/ payment_id, 
									/* 03*/ payment_dt, 
									/* 04*/ amount, 
									/* 05*/ payment_method, 
									/* 06*/ currency )
									
							VALUES (/* 01*/ :szLastInvoiceNum, 
									/* 02*/ payments_seq.nextval, 
									/* 03*/ TO_DATE(:payDate, 'DD-MM-YYYY'),
									/* 04*/ :payAmount, 
									/* 05*/ :payMethod, 
									/* 06*/ :payCurremcy);	
									
					
			if (sqlca.sqlcode != 0) 
				{
				
				writeToLogErr(fpLog, "Row111 not inserted in Payments and exit the program.");
				EXEC SQL ROLLBACK WORK RELEASE; // roll back the transaction if the rollback flag is set to 1
				EXEC SQL CONNECT :connection;
				} 
				else 
				{
				sql_Commit(fpMsg, fpLog);
				writeToLogMsg(fpMsg, "Row inserted in Payments.");
				} 
		} 
	else
	{
	writeToLogErr(fpLog, "Row222 not inserted in Payments and exit the program.");
	writeToLogErr(fpLog, sqlca.sqlerrm.sqlerrmc);
	EXEC SQL ROLLBACK WORK RELEASE;
	}
}		
